// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt  @id @default(autoincrement())
  email    String  @unique @db.String(255)
  name     String  @db.String(255)
  password String  @db.String
  code     String? @db.String(6)

  cartItems CartItem[]
  sessions  Session[]
  reviews   Review[]

  @@index(email)
}

model Session {
  id        String   @id @default(cuid()) @db.String(30)
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  lastLogin DateTime @default(now())
}

model Review {
  author   User   @relation(fields: [authorId], references: [id])
  authorId BigInt
  item     Item   @relation(fields: [itemId], references: [id])
  itemId   BigInt

  anonymous Boolean
  rating    Int     @db.Int2
  comment   String? @db.String(255)

  @@id([authorId, itemId])
}

enum Category {
  Book
  Electronic
  Stationary
  Course
  Dorm
  Tutoring
  Service
  Other
}

model Item {
  id          BigInt       @id @default(autoincrement())
  name        String
  imageUrl    String       @db.String(255)
  price       Int
  category    Category     @default(Other)
  detailsList ItemDetail[]
  available   Boolean

  carts   CartItem[]
  reviews Review[]
}

model ItemDetail {
  id              BigInt           @id @default(autoincrement())
  detail          String           @db.String(255)
  Item            Item             @relation(fields: [itemId], references: [id])
  itemId          BigInt
  // irrelevant
  CartItemDetails CartItemDetail[]
}

model CartItem {
  user      User             @relation(fields: [userId], references: [id])
  userId    BigInt
  Item      Item             @relation(fields: [itemId], references: [id])
  itemId    BigInt
  quantity  Int
  details   CartItemDetail[]
  createdAt DateTime         @default(now())
  ordered   Boolean
  // if order is TRUE, this must exist
  OrderItem OrderItem?

  @@id([userId, itemId])
}

enum Status {
  pending // right after payment
  shipped // waiting to be delivered
  delivered // delivered
  returned // returned
  failed // error
}

model Order {
  id        String      @id @default(cuid()) @db.String(30)
  orders    OrderItem[]
  status    Status
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @db.String(30)
  cartUserId BigInt
  cartItemId BigInt
  cartItem   CartItem @relation(fields: [cartUserId, cartItemId], references: [userId, itemId])
  createdAt  DateTime @default(now())

  @@id([orderId, cartUserId, cartItemId])
  // one to one
  @@unique([cartUserId, cartItemId])
}

model CartItemDetail {
  detail       ItemDetail @relation(fields: [itemDetailId], references: [id])
  itemDetailId BigInt
  cartUserId   BigInt
  cartItemId   BigInt

  cartItem CartItem @relation(fields: [cartUserId, cartItemId], references: [userId, itemId])

  @@id([cartUserId, cartItemId])
}
